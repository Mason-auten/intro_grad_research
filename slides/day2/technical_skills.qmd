---
title: Git and Version Control
subtitle: "Statistics for Political Science"
format: clean-revealjs
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
author:
  - name: Mason Auten
    email: mason.auten@vanderbilt.edu
    affiliations: Vanderbilt University
  - name: Patrick Buhr
    email: patrick.buhr@Vanderbilt.Edu
    affiliations: Vanderbilt University
date: today
self-contained: true
engine: knitr
execute: 
  eval: false
---

# Workflow

## Overview

::::: columns
::: column
-   There is no single right way to work.
-   At the end of the day the key is to find a set of patterns and tools that work for you and stick to it.
-   However, there are more or less efficient ways to work.
:::

::: column
-   The goal is to teach you practices that will help you in the long run.
-   How you implement them is up to you.
-   We are going to show you one workflow and take some common lessons from it.
:::
:::::

## Project Workflow

-   In general, it's best to focus your work on a particular paper to one "master" folder.
-   Potential structure for it looks something like this

``` bash

my_project/  
├── README.md
├── .gitignore
├── data/  # data you collect
│   ├── raw/            # untouched originals  
│   └── cleaned/      # cleaned, ready-to-analyze  
├── docs/            # R scripts or notebooks  
│   ├── 01_load_data.R  
│   ├── 02_clean_data.R  
├── papers/         # write-up in Quarto / LaTeX / Word or presentations
│   ├── paper.qmd  
│   └── references.bib 
└── inst/ # data you didn't collect 
```

## Project Workflow

-   Feel free to look at the [general template](https://github.com/Mason-auten/general_template) I made on GitHub.
-   Modify this general structure as you see fit.
-   The central point is find a replicable structure that saves you time and where you can keep all of your work on a particular paper in one place.
-   Consider keeping a log file for where you write what you did for that project.

## Naming and Drafts:

-   It's boring but it needs to be talked about
-   In the draft phase, I tend to date each draft
-   Examanple: 2025-08-11_paper
    -   This keeps you from writing draft10, final_draft, final_draft100, and so on.
    -   Eventually, when you name scripts, it's best to specify them in the order you want them run
    -   01_load_data.R
    -   02_you_name_it.R

## Central Take Aways

::::: columns
::: column
**Do**

-   Focus on repeatable ways to store and organize your files
-   Keep files to a project in one central area
-   Use a common naming convention
-   Focus on being able to store and retrieve data quickly
-   Backup your files in some way
:::

::: column
**Don't**

-   Store everything in your downloads.
-   Keep pieces of your project stored in different places.
:::
:::::

# Note Taking

## Overview

-   Find a way to store and retrieve data for yourself that works and stick to it.
-   Again there is no single right way or catch all application for this.
    -   You can use paper, Obsidian, Evernote, Notion, Word, Excel, so long as it WORKS for you.
-   The key is to find a explicable structure to break down articles and reading.
    -   This will also help you read faster as you continue with the program.

## General Advice

-   Figure out [what kind of note taker](https://nesslabs.com/how-to-choose-the-right-note-taking-app#librarians) you are
-   Notion is good for building your own databases.
-   Obsidian is gaining that functionality and is good at linking ideas and is highly customizable

## Template

-   A potential way to breakdown information is to be able to fill out a set of categories.
-   You'll find an example in the references folder.

## Citation & Core Info

-   **Citation:**
-   **Authors:**\
-   **Research Question:**
-   **Themes:**

## Core Ideas & Results

-   **Main Ideas / Results:**
-   **Key Point 1:**
-   **Key Point 2:**
-   **Key Point 3:**

## Evidence & Variables

-   **Independent Variables:**
-   **Dependent Variables:**
-   **Method:**

## Context & Scope

-   **Temporal Scope:**
-   **Spatial Scope:**
-   **Other Useful Citations:**

## Notes & Quotes

-   **Quotes:**
-   **Notes:**

# Git Ready for Grad School

## Introduction

::::: columns
::: column
-   Git is a way to work with projects that is **open source**.
    -   While often associated with GitHub, Git and GitHub are different.
        -   Git is the tool for version control.
        -   GitHub is a place to host and collaborate on Git repositories.
-   At the heart of it, Git is about **version control**.
:::

::: column
**Example**

-   If you and I are both working on the same project, version control means we each have a local copy.
-   We save our changes locally.
-   Download the other person’s changes.
-   Say what we changed and upload our changes.
-   We can see **who** made changes, **what** they were, and **when** they happened.
:::
:::::

## Concepts

::::: columns
::: column
-   **Repository**: Main working directory + Git history (`.git` folder).
-   **Working Tree**: Files you see/edit on disk.
-   **GitHub**: Service to host and collaborate on repositories.
-   **Commit**: Saved snapshot of staged changes.
-   **Branch**: Divergent line of work from `main`—for new features or fixes.
-   **HEAD**: Pointer to your current branch/commit.
:::

::: column
-   **Merge**: Combine work from different branches.
-   **Rebase**: Replay commits onto another branch for a tidy history.
-   **Pull**: Download and integrate changes from a remote.
-   **Fetch**: Download changes without integrating them yet.
-   **Push**: Upload local commits to a remote.
:::
:::::

## Setup

-   [Create a GitHub account](https://github.com/)
-   [Download Git](https://git-scm.com/downloads)
-   [Install GitHub CLI](https://github.com/cli/cli#installation)
-   [Follow instructions here to get up and running](https://docs.github.com/en/get-started/git-basics/set-up-git)

````{=html}
<!-- 
## First Time Setup
```bash
git config --global user.name "Your Name"
git config --global user.email "you@vanderbilt.edu"
git config --global pull.rebase true   # keeps history cleaner
ssh-keygen -t ed25519 -C "you@vanderbilt.edu"
# Add the public key to GitHub: Settings → SSH and GPG keys

``` -->
````

## GIT-ting Started

1.  Create or copy a GitHub repository.
2.  Create a local version of the repository.
3.  Add a file, make changes, stage and commit those changes.
4.  Pull changes to your repo.
5.  Push changes back to the branch.

## Useful Commands

::: notes
-   While you can work through a GUI like Rstudio or Vscode and manage most of Git
    -   It's still helpful to have a few command line commands ready to go
:::

``` bash


git reset # you likely want to stick to soft reset
git init       # create a new Git repository
git clone      # copy a repository from a remote source
git status     # show changes in the working directory
git add        # stage changes for commit
git commit     # save staged changes to history
git log        # view commit history
```

## Usefull Commands

``` bash

git pull       # fetch and merge changes from remote
git push       # upload local changes to remote
git merge      # combine changes from another branch
git branch     # list, create, or delete branches
git checkout   # switch branches or restore files
git revert     # undo a specific commit by creating a new one
git reflog  # to recover “lost” commits.
```

## Best Practices

-   Keep commits small and focused.
-   Use .gitignore to avoid tracking weird data or large files
-   Use branches when working on different features